/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  BookableDay: 5 | 1 | 6 | 0 | 4 | 2 | 3
  BookableSession: 3 | 0 | 4 | 2 | 1
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Bookable: { // root type
    days: NexusGenEnums['BookableDay'][]; // [BookableDay!]!
    group: string; // String!
    id: number; // Int!
    notes?: string | null; // String
    sessions: NexusGenEnums['BookableSession'][]; // [BookableSession!]!
    title: string; // String!
  }
  Booking: { // root type
    date: string; // String!
    id: number; // Int!
    notes?: string | null; // String
    session: NexusGenEnums['BookableSession']; // BookableSession!
    title: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    id: number; // Int!
    img: string; // String!
    name: string; // String!
    notes?: string | null; // String
    title: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Bookable: { // field return type
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    days: NexusGenEnums['BookableDay'][]; // [BookableDay!]!
    group: string; // String!
    id: number; // Int!
    notes: string | null; // String
    sessions: NexusGenEnums['BookableSession'][]; // [BookableSession!]!
    title: string; // String!
  }
  Booking: { // field return type
    bookable: NexusGenRootTypes['Bookable']; // Bookable!
    booker: NexusGenRootTypes['User']; // User!
    date: string; // String!
    id: number; // Int!
    notes: string | null; // String
    session: NexusGenEnums['BookableSession']; // BookableSession!
    title: string; // String!
  }
  Mutation: { // field return type
    createBookable: number; // Int!
    createBooking: number; // Int!
    deleteBookable: number; // Int!
    deleteBooking: number; // Int!
    updateBookable: number; // Int!
    updateBooking: number; // Int!
  }
  Query: { // field return type
    bookable: NexusGenRootTypes['Bookable'] | null; // Bookable
    bookables: NexusGenRootTypes['Bookable'][]; // [Bookable!]!
    booking: NexusGenRootTypes['Booking'] | null; // Booking
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    user: NexusGenRootTypes['User'] | null; // User
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    bookings: NexusGenRootTypes['Booking'][]; // [Booking!]!
    id: number; // Int!
    img: string; // String!
    name: string; // String!
    notes: string | null; // String
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Bookable: { // field return type name
    bookings: 'Booking'
    days: 'BookableDay'
    group: 'String'
    id: 'Int'
    notes: 'String'
    sessions: 'BookableSession'
    title: 'String'
  }
  Booking: { // field return type name
    bookable: 'Bookable'
    booker: 'User'
    date: 'String'
    id: 'Int'
    notes: 'String'
    session: 'BookableSession'
    title: 'String'
  }
  Mutation: { // field return type name
    createBookable: 'Int'
    createBooking: 'Int'
    deleteBookable: 'Int'
    deleteBooking: 'Int'
    updateBookable: 'Int'
    updateBooking: 'Int'
  }
  Query: { // field return type name
    bookable: 'Bookable'
    bookables: 'Bookable'
    booking: 'Booking'
    bookings: 'Booking'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    bookings: 'Booking'
    id: 'Int'
    img: 'String'
    name: 'String'
    notes: 'String'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Bookable: {
    bookings: { // args
      endDate?: string | null; // String
      startDate?: string | null; // String
    }
  }
  Mutation: {
    createBookable: { // args
      days: NexusGenEnums['BookableDay'][]; // [BookableDay!]!
      group: string; // String!
      notes?: string | null; // String
      sessions: NexusGenEnums['BookableSession'][]; // [BookableSession!]!
      title: string; // String!
    }
    createBooking: { // args
      bookableId: number; // Int!
      bookerId: number; // Int!
      date: string; // String!
      notes?: string | null; // String
      session: NexusGenEnums['BookableSession']; // BookableSession!
      title: string; // String!
    }
    deleteBookable: { // args
      id: number; // Int!
    }
    deleteBooking: { // args
      id: number; // Int!
    }
    updateBookable: { // args
      days: NexusGenEnums['BookableDay'][]; // [BookableDay!]!
      group: string; // String!
      id: number; // Int!
      notes?: string | null; // String
      sessions: NexusGenEnums['BookableSession'][]; // [BookableSession!]!
      title: string; // String!
    }
    updateBooking: { // args
      bookableId: number; // Int!
      bookerId: number; // Int!
      date: string; // String!
      id: number; // Int!
      notes?: string | null; // String
      session: NexusGenEnums['BookableSession']; // BookableSession!
      title: string; // String!
    }
  }
  Query: {
    bookable: { // args
      id: number; // Int!
    }
    booking: { // args
      id: number; // Int!
    }
    bookings: { // args
      bookableId?: number | null; // Int
      bookerId?: number | null; // Int
      endDate?: string | null; // String
      startDate?: string | null; // String
    }
    user: { // args
      id: number; // Int!
    }
  }
  User: {
    bookings: { // args
      bookableId?: number | null; // Int
      endDate?: string | null; // String
      startDate?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}